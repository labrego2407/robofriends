{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAeeA,EAbF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAEzB,OACI,sBAAKC,UAAU,sDAAf,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACI,6BAAKF,IACL,4BAAIC,WCYLK,EAnBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAEf,OACI,8BAEQA,EAAOC,KAAI,SAACR,EAAMS,GACd,OACA,cAAC,EAAD,CAEIP,GAAIK,EAAOE,GAAGP,GACdF,KAAMO,EAAOE,GAAGT,KAChBC,MAAOM,EAAOE,GAAGR,OAHZQ,SCMdC,EAfG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,mCACI,8BACI,uBACIR,UAAU,mCACVS,KAAK,SACLC,YAAY,gBACZC,SAAUH,SCAfI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAtE,SACKJ,EAAMK,YCkBJC,E,kDAnBX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,UAAU,GAHJ,E,8DAOIC,EAAOC,GACrBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACJ,uDAEJG,KAAKX,MAAMK,a,GAhBEQ,aCqDbC,G,wDA7CX,aAAe,IAAD,8BACV,gBAgBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAhB1C,EAAKZ,MAAQ,CAEThB,OAAQ,GACR0B,YAAa,IALP,E,gEASO,IAAD,OAChBG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAErB,OAAQiC,S,+BASjC,IAAD,EAC2Bb,KAAKJ,MAA7BhB,EADH,EACGA,OAAQ0B,EADX,EACWA,YAEVQ,EAAiBlC,EAAOmC,QAAO,SAAAC,GACjC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASZ,EAAYW,kBAGzD,OAAKrC,EAAOuC,OAIJ,sBAAK3C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWQ,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUxB,OAAQkC,WAR3B,oBAAItC,UAAU,KAAd,4B,GA9BD0B,cCGHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAO1BZ,M","file":"static/js/main.332e1411.chunk.js","sourcesContent":["// import React from 'react'\n\nconst Card = ({ name, email, id }) => {\n\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import Card from \"./Card\";\n\nconst CardList = ({robots}) => {\n\n    return (\n        <div>\n            {\n                robots.map((name, i) => {\n                    return (\n                    <Card \n                        key={i} \n                        id={robots[i].id} \n                        name={robots[i].name} \n                        email={robots[i].email}/>\n                    );\n                })                \n            }\n        </div>\n    );\n}\n\nexport default CardList;","\nconst SearchBox = ({ searchChange }) => {\n    return(\n        <>\n            <div>\n                <input \n                    className='pa3 ba b--green bg-lightest-blue'\n                    type='search' \n                    placeholder='search robots'\n                    onChange={searchChange}\n                />\n            </div>\n        </>\n    );\n}\n\nexport default SearchBox;","\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflowY: 'scroll', border: '0px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import { Component } from \"react\";\n\nclass ErrorBoundary extends Component {\n    constructor() {\n        super();\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true });\n    }\n\n    render() {\n        if (this.state.hasError) {\n            return <h1>An error has ocurred!</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import CardList from '../components/CardList';\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from '../components/Scroll'\nimport ErrorBoundary from '../components/ErrorBoundry'\n// import { robots } from './robots';\nimport { Component } from 'react';\nimport './App.css'\n\n//Any component that uses 'state' has to be a class\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            // robots: robots,\n            robots: [],\n            searchfield: ''        \n        };\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({ robots: users }));\n    }\n\n    //Always use arrow functions on events passed to other components\n    //change the state field value to whatever is on the searchbox\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value });\n    }\n\n    render() {\n        const { robots, searchfield } = this.state;\n\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n\n        if (!robots.length) {\n            return <h1 className='tc'>Loading...</h1>\n        } else {\n            return(\n                <div className='tc'>\n                    <h1 className='f1'>RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange} />\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            )}\n        }\n}\n\nexport default App;\n\n\n// const App = () => {\n//     return(\n//         <div className='tc'>\n//             <h1>RoboFriends</h1>\n//             <SearchBox />\n//             <CardList robots={robots} />\n//         </div>\n//     );\n// }","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n//    <App />\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}